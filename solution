class Solution {
private:
    struct Trie
    {
        vector<Trie*> children{26};
        bool end{false};
    };
    
    Trie* root;
    
    void insert(string& s)
    {
        if (s.empty()) return;
        Trie* cur = root;
        for (char c:s)
        {
            if (cur->children[c-'a'] == nullptr)
                cur->children[c-'a'] = new Trie();
            cur = cur->children[c-'a'];
        }
        cur->end = true;
    }
    
    bool dfs(Trie* root, Trie* node, string& word, int idx, int count)
    {
        if (!node)
            return false;
        
        if (idx >= word.size())
        {
            if (node->end && count >=1 )
                return true;
            else
                return false;
        }
        
        if (node->end && dfs(root, root, word, idx, count+1))
            return true;
        return dfs(root, node->children[word[idx]-'a'], word, idx+1, count);
    }
    
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        sort(words.begin(), words.end(), [](const string& w1, const string& w2) {
            return w1.size() < w2.size();
        });
        
        vector<string> ret;
        root = new Trie();
        
        for(auto &w: words)
        {
            if (w.empty()) continue;
            if(dfs(root, root, w, 0, 0)) 
                ret.push_back(w);
            else 
                insert(w);
        }
    
        return ret;
    }
};


